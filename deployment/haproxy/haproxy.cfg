# HAProxy configuration for ALD Control System
# Provides load balancing and blue-green deployment support

global
    daemon
    user haproxy
    group haproxy
    pidfile /var/run/haproxy.pid

    # Security hardening
    chroot /var/lib/haproxy
    stats socket /var/lib/haproxy/stats level admin

    # SSL/TLS configuration
    ssl-default-bind-ciphers ECDHE+AESGCM:ECDHE+CHACHA20:RSA+AESGCM:RSA+SHA256:!aNULL:!MD5:!DSS
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

    # Logging
    log 127.0.0.1:514 local0

    # Performance tuning
    nbproc 1
    maxconn 4096

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option log-health-checks
    option redispatch
    retries 3

    # Timeouts
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    timeout http-request 10s
    timeout http-keep-alive 2s
    timeout check 3s

    # Health checks
    option httpchk GET /health/basic
    http-check expect status 200

# Statistics interface
listen stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE
    stats auth admin:your-stats-password
    stats realm "HAProxy Statistics"

# Frontend configuration
frontend ald_frontend
    bind *:80
    bind *:443 ssl crt /etc/ssl/certs/ald-control.pem

    # Security headers
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains"

    # Redirect HTTP to HTTPS (in production)
    redirect scheme https code 301 if !{ ssl_fc }

    # Rate limiting
    stick-table type ip size 100k expire 30s store http_req_rate(10s),http_err_rate(10s)
    http-request track-sc0 src
    http-request deny if { sc_http_req_rate(0) gt 100 }

    # Health check routing (bypass load balancing)
    use_backend health_check if { path_beg /health }

    # Default backend
    default_backend ald_control

# Health check backend (direct routing)
backend health_check
    balance roundrobin
    option httpchk GET /health/basic
    http-check expect status 200
    server ald-main ald-control:8000 check inter 5s
    server ald-green ald-control-green:8000 check inter 5s backup

# Main ALD Control backend
backend ald_control
    balance roundrobin
    cookie SERVERID insert indirect nocache

    # Health checks
    option httpchk GET /health/basic
    http-check expect status 200

    # Blue-Green deployment configuration
    # Blue (current production)
    server ald-blue ald-control:8000 check inter 10s cookie blue weight 100

    # Green (standby for deployment)
    server ald-green ald-control-green:8000 check inter 10s cookie green weight 0 backup

    # Connection settings
    default-server maxconn 50 check inter 10s fall 3 rise 2

# Backend for canary deployments
backend ald_canary
    balance roundrobin

    # Health checks
    option httpchk GET /health/basic
    http-check expect status 200

    # Canary routing (5% traffic to new version)
    server ald-main ald-control:8000 check weight 95
    server ald-canary ald-control-green:8000 check weight 5

# Error pages
errorfile 400 /etc/haproxy/errors/400.http
errorfile 403 /etc/haproxy/errors/403.http
errorfile 408 /etc/haproxy/errors/408.http
errorfile 500 /etc/haproxy/errors/500.http
errorfile 502 /etc/haproxy/errors/502.http
errorfile 503 /etc/haproxy/errors/503.http
errorfile 504 /etc/haproxy/errors/504.http

# Blue-Green deployment switching configuration
# Uncomment the appropriate section during deployment

# During blue-green switch (manual activation)
# backend ald_control
#     balance roundrobin
#     server ald-blue ald-control:8000 check inter 10s weight 0 backup
#     server ald-green ald-control-green:8000 check inter 10s weight 100

# Maintenance mode configuration
# backend ald_maintenance
#     errorfile 503 /etc/haproxy/errors/maintenance.http
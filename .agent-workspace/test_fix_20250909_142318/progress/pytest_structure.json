{
  "analysis_timestamp": "2025-09-09T14:23:45+03:00",
  "files_analyzed": [
    "tests/integration/test_basic_integration.py",
    "tests/integration/test_recipe_execution.py",
    "tests/integration/test_command_flow.py",
    "tests/integration/test_comprehensive.py", 
    "tests/integration/test_recipe_validation.py"
  ],
  "current_structure_analysis": {
    "working_files": {
      "test_basic_integration.py": {
        "status": "needs_conversion",
        "current_pattern": "main() function with return codes",
        "test_functions": ["main"],
        "pytest_compatible": false,
        "notes": "Simple standalone script with basic assertions"
      },
      "test_recipe_execution.py": {
        "status": "partial_conversion_needed", 
        "current_pattern": "test_recipe_loading() function",
        "test_functions": ["test_recipe_loading"],
        "pytest_compatible": "partial",
        "notes": "Already has test_* function but also has main() wrapper"
      }
    },
    "failing_files": {
      "test_command_flow.py": {
        "status": "needs_full_conversion",
        "current_pattern": "CommandFlowIntegrationTest class with async main()",
        "test_methods": ["run_all_tests", "_test_command_creation_detection", "_test_start_recipe_command", "_test_stop_recipe_command", "_test_set_parameter_command", "_test_command_state_transitions", "_test_recipe_command_schema_integration", "_test_error_handling_recovery", "_test_concurrent_command_processing"],
        "pytest_compatible": false,
        "notes": "Class-based test suite with multiple test methods, needs pytest fixtures"
      },
      "test_comprehensive.py": {
        "status": "needs_full_conversion",
        "current_pattern": "ComprehensiveIntegrationTest class with async main()",
        "test_methods": ["run_all_tests", "_test_database_schema_validation", "_test_recipe_loading_validation", "_test_step_configuration_loading", "_test_recipe_parameter_access", "_test_command_flow_integration", "_test_recipe_execution_state_tracking", "_test_loop_step_execution", "_test_error_handling_recovery"],
        "pytest_compatible": false,
        "notes": "Complex class-based test suite, needs pytest fixtures for setup"
      },
      "test_recipe_validation.py": {
        "status": "needs_full_conversion", 
        "current_pattern": "RecipeExecutionValidator class with async main()",
        "test_methods": ["run_all_validations", "_validate_recipe_structure_loading", "_validate_step_configuration_mapping", "_validate_parameter_integration", "_validate_loop_step_expansion", "_validate_progress_calculation", "_validate_state_transitions", "_validate_backwards_compatibility"],
        "pytest_compatible": false,
        "notes": "Validation-focused class with multiple validation methods"
      }
    }
  },
  "conversion_strategy": {
    "approach": "preserve_functionality_convert_structure",
    "key_principles": [
      "Convert main() functions to test_main() functions",
      "Convert class-based test methods to standalone test functions",
      "Create pytest fixtures for common setup (database, test data)",
      "Preserve all assertions and test logic exactly", 
      "Maintain async/await patterns where needed",
      "Add proper pytest decorators (@pytest.mark.asyncio)",
      "Use pytest fixtures for test environment setup"
    ],
    "fixtures_needed": [
      "supabase_client",
      "test_machine_id", 
      "test_user_id",
      "test_session_id",
      "simple_recipe_id",
      "complex_recipe_id"
    ],
    "conversion_steps": [
      "1. Create conftest.py with shared fixtures",
      "2. Convert simple main() functions to test_main()",
      "3. Extract class methods to standalone test functions", 
      "4. Add pytest.mark.asyncio decorators for async tests",
      "5. Replace class-based setup with pytest fixtures",
      "6. Update imports and remove standalone execution logic",
      "7. Validate converted tests run with pytest"
    ]
  },
  "files_to_convert": {
    "test_basic_integration.py": {
      "new_functions": ["test_basic_integration_main"],
      "changes": [
        "Convert main() to test_basic_integration_main()",
        "Remove if __name__ == '__main__' block",
        "Add supabase fixture usage",
        "Keep all existing assertions"
      ]
    },
    "test_recipe_execution.py": {
      "new_functions": ["test_recipe_loading"],
      "changes": [
        "Keep existing test_recipe_loading() function", 
        "Remove main() wrapper function",
        "Remove if __name__ == '__main__' block",
        "Add pytest.mark.asyncio decorator",
        "Add fixtures for test setup"
      ]
    },
    "test_command_flow.py": {
      "new_functions": [
        "test_command_creation_detection",
        "test_start_recipe_command", 
        "test_stop_recipe_command",
        "test_set_parameter_command",
        "test_command_state_transitions", 
        "test_recipe_command_schema_integration",
        "test_error_handling_recovery",
        "test_concurrent_command_processing"
      ],
      "changes": [
        "Extract each _test_* method from class to standalone function",
        "Add pytest.mark.asyncio decorators",
        "Use fixtures instead of class setup",
        "Remove class structure",
        "Preserve all test logic and assertions"
      ]
    },
    "test_comprehensive.py": {
      "new_functions": [
        "test_database_schema_validation",
        "test_recipe_loading_validation", 
        "test_step_configuration_loading",
        "test_recipe_parameter_access",
        "test_command_flow_integration",
        "test_recipe_execution_state_tracking",
        "test_loop_step_execution", 
        "test_error_handling_recovery"
      ],
      "changes": [
        "Extract each _test_* method from class to standalone function", 
        "Add pytest.mark.asyncio decorators",
        "Use fixtures instead of class setup",
        "Remove class structure", 
        "Preserve all test logic and assertions"
      ]
    },
    "test_recipe_validation.py": {
      "new_functions": [
        "test_recipe_structure_loading",
        "test_step_configuration_mapping",
        "test_parameter_integration", 
        "test_loop_step_expansion",
        "test_progress_calculation",
        "test_state_transitions",
        "test_backwards_compatibility"
      ],
      "changes": [
        "Extract each _validate_* method from class to standalone function",
        "Rename _validate_* to test_*", 
        "Add pytest.mark.asyncio decorators",
        "Use fixtures instead of class setup",
        "Remove class structure",
        "Preserve all validation logic"
      ]
    }
  },
  "conftest_py_needed": {
    "location": "tests/conftest.py",
    "fixtures": [
      {
        "name": "supabase_client",
        "scope": "session",
        "description": "Shared Supabase client for all tests"
      },
      {
        "name": "test_recipe_ids", 
        "scope": "session",
        "description": "Dictionary of test recipe IDs"
      },
      {
        "name": "test_machine_id",
        "scope": "session", 
        "description": "Test machine ID for integration tests"
      },
      {
        "name": "test_user_id",
        "scope": "session",
        "description": "Test user ID for integration tests"  
      },
      {
        "name": "test_session",
        "scope": "function",
        "description": "Test session for each test function"
      }
    ]
  },
  "pytest_configuration": {
    "current_config": "pyproject.toml has pytest configuration",
    "testpaths": ["tests"],
    "python_files": ["test_*.py"], 
    "python_functions": ["test_*"],
    "additional_markers_needed": [
      "asyncio: marks tests as async tests",
      "integration: marks tests as integration tests"
    ]
  },
  "validation_plan": {
    "steps": [
      "1. Run pytest --collect-only to verify test discovery",
      "2. Run individual test files with pytest tests/integration/test_*.py",  
      "3. Run full test suite with pytest tests/",
      "4. Compare test results with original standalone execution",
      "5. Verify all assertions are still tested",
      "6. Check test coverage and execution time"
    ]
  },
  "expected_benefits": [
    "Tests discoverable by pytest",
    "Can run individual tests or test suites", 
    "Better test reporting and output",
    "Integration with IDE test runners",
    "Parallel test execution possible",
    "Fixture reuse across tests",
    "Better test isolation"
  ],
  "potential_issues": [
    "Async tests need pytest-asyncio plugin",
    "Database state might need cleanup between tests",
    "Some tests might have implicit dependencies",
    "Test execution order might matter for some tests"
  ],
  "files_converted": [],
  "pytest_functions_created": [],
  "fixtures_added": [],
  "validation_results": [],
  "status": "analysis_complete_ready_for_conversion"
}
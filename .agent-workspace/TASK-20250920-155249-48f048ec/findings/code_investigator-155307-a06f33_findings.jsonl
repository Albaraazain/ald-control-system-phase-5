{"timestamp": "2025-09-20T15:59:08.047538", "agent_id": "code_investigator-155307-a06f33", "finding_type": "issue", "severity": "high", "message": "Logs page uses non-existent Streamlit API `st.autorefresh` (should be `st_autorefresh`), causing runtime AttributeError and broken auto-follow.", "data": {"file": "streamlit_app/pages/03_Logs.py:33", "current_call": "st.autorefresh(interval=2000, key=\"logs_refresh\")", "recommended_fix": "from streamlit import st; replace with st_autorefresh(interval=2000, key=\"logs_refresh\") or implement manual rerun"}}
{"timestamp": "2025-09-20T15:59:17.072190", "agent_id": "code_investigator-155307-a06f33", "finding_type": "issue", "severity": "medium", "message": "Debug Tools mapping includes invalid `plc_cli_status` entry that calls `python tools/plc_cli/plc_cli.py status`, but CLI has no `status` subcommand. Running it errors with \"the following arguments are required: cmd\".", "data": {"file": "streamlit_app/lib/integration_adapters.py", "key": "TOOLS['plc_cli_status']", "cli_supported_subcommands": ["connect-test", "read-coil", "write-coil", "read-reg", "write-reg", "interpret"], "recommendation": "Replace with a valid subcommand (e.g., ['connect-test']) or remove entry"}}
{"timestamp": "2025-09-20T15:59:30.384954", "agent_id": "code_investigator-155307-a06f33", "finding_type": "insight", "severity": "medium", "message": "UI exposes a mode selector (local/remote/ssh) in app.py, but controllers are local-only. Mode changes don\u2019t alter behavior, potentially confusing operators.", "data": {"file": "streamlit_app/app.py", "session_state_key": "mode", "controllers": ["streamlit_app/lib/service_controller.py (local only)", "streamlit_app/lib/status_providers.py (Supabase optional)"], "recommendation": "Either hide modes not implemented or route controller selection by mode (add Remote/Supabase and SSH adapters)."}}
{"timestamp": "2025-09-20T15:59:38.288952", "agent_id": "code_investigator-155307-a06f33", "finding_type": "issue", "severity": "medium", "message": "Two overlapping service control modules (`lib/service_controller.py` vs `lib/service_control.py`) implement similar responsibilities with different APIs and patterns. Risk of drift and confusion.", "data": {"files": ["streamlit_app/lib/service_controller.py", "streamlit_app/lib/service_control.py"], "symptoms": ["Different service registries and start/stop flows", "Different logging/STDIO handling", "Different PID tracking strategies"], "recommendation": "Consolidate on one module (prefer `service_controller.py` used by pages) and remove/rename the other to avoid accidental imports."}}
{"timestamp": "2025-09-20T15:59:50.122336", "agent_id": "code_investigator-155307-a06f33", "finding_type": "issue", "severity": "medium", "message": "Inconsistent virtualenv names: scripts expect `./myenv` while `run_streamlit.sh` creates/uses `./venv`. Leads to startup failures for UI/service launchers.", "data": {"scripts_referencing_myenv": ["scripts/start_main_service.sh", "scripts/start_parameter_control_ui.sh", "scripts/start_plc_tester.sh", "scripts/start_plc_debug.sh"], "script_using_venv": ["run_streamlit.sh"], "recommendation": "Standardize on one env name (prefer `myenv` per CLAUDE.md) or detect both; update docs accordingly."}}

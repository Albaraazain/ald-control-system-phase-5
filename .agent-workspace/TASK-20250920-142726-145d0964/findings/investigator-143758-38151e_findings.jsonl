{"timestamp": "2025-09-20T14:44:15.177344", "agent_id": "investigator-143758-38151e", "finding_type": "issue", "severity": "high", "message": "Auto-discovery path likely broken due to wrong import in PLCCommunicator._run_discovery_sync (uses `from plc.discovery` instead of `from src.plc.discovery`).", "data": {"files": ["src/plc/communicator.py:110", "src/plc/communicator.py:83-92"], "impact": "Auto-discover never yields candidates in synchronous path; logs show fallback to static IP despite AUTO_DISCOVER=true.", "quick_fix": "Change import to `from src.plc.discovery import auto_discover_plc` and/or call discovery directly in connect() instead of re-importing inside _run_discovery_sync."}}
{"timestamp": "2025-09-20T14:44:32.160823", "agent_id": "investigator-143758-38151e", "finding_type": "insight", "severity": "medium", "message": "Connection attempt logging is misleading: RealPLC logs static IP connect before hostname/discovery attempts, confusing operators about order.", "data": {"file": "src/plc/real_plc.py:76", "recommendation": "Move the static IP log to after PLCCommunicator.connect() or change to a neutral message like \"Preparing connection targets (hostname, discovery, static)\"; have PLCCommunicator emit a consolidated targets list and per-attempt logs."}}
{"timestamp": "2025-09-20T14:44:40.401285", "agent_id": "investigator-143758-38151e", "finding_type": "issue", "severity": "medium", "message": "Potential socket/resource leak in PLCCommunicator._attempt_connection: unsuccessful ModbusTcpClient instances are assigned to self.client and not closed before next attempt.", "data": {"file": "src/plc/communicator.py:167-186", "impact": "On repeated retries or target fallbacks, multiple unclosed clients can accumulate until GC; may cause TCP TIME_WAIT buildup and flaky reconnects.", "quick_fix": "Use a local `client` variable per attempt; only assign to `self.client` when `connect()` returns True; explicitly `client.close()` on failures."}}
{"timestamp": "2025-09-20T14:44:50.694243", "agent_id": "investigator-143758-38151e", "finding_type": "insight", "severity": "low", "message": "`PLC_CONFIG['byte_order']` is not passed into RealPLC/PLCCommunicator; current behavior relies on module-level default `PLC_BYTE_ORDER` at import time.", "data": {"files": ["src/plc/factory.py:17-44", "src/plc/real_plc.py:27-53", "src/plc/communicator.py:19-21"], "implication": "CLI/env overrides must be set before importing communicator; factory-level config cannot override per-instance byte-order.", "quick_win": "Add `byte_order = config.get('byte_order', PLC_BYTE_ORDER)` in factory and pass to RealPLC(..., byte_order=byte_order) then to PLCCommunicator; keep current default for backwards-compat."}}

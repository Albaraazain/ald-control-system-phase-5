{"timestamp": "2025-09-20T14:31:47.870013", "agent_id": "investigator-142927-625883", "finding_type": "issue", "severity": "medium", "message": "Doctor mode requires Supabase env set; otherwise config import raises before tests run", "data": {"files": ["src/config.py", ".env.example", "OPERATIONS.md"], "detail": "`src/config.py` hard-validates SUPABASE_URL/KEY on import, so `python main.py --doctor` will error without env vars. Action: either keep requirement and document (done) or relax validation for doctor-only runs."}}
{"timestamp": "2025-09-20T14:36:28.994144", "agent_id": "investigator-142927-625883", "finding_type": "issue", "severity": "high", "message": "`--doctor` crashes when SUPABASE envs are missing due to import-time validation in src/config.py, preventing reduced-mode operation.", "data": {"repro_steps": ["mv .env .env.bak", "source .venv/bin/activate && python main.py --doctor"], "observed_error": "ValueError: SUPABASE_URL and SUPABASE_KEY must be set in .env file", "files": ["src/config.py:33"], "expected": "Doctor should report missing config and exit non-zero without traceback; service should be able to run in reduced mode without Supabase."}}
{"timestamp": "2025-09-20T14:36:36.209682", "agent_id": "investigator-142927-625883", "finding_type": "insight", "severity": "medium", "message": "Real PLC path shows static-IP connection log before hostname/auto-discovery, which can confuse users about the actual connection attempt order.", "data": {"evidence": ["real_run.log lines showing 'Connecting to real PLC at 10.5.5.80:502' then 'Attempting hostname resolution: plc.local' and 'Attempting auto-discovery...'"], "files": ["src/plc/communicator.py:64-92", "src/plc/factory.py:43-55"], "recommendation": "Reorder logs: print a consolidated 'Preparing connection targets' list, then log 'Trying hostname ...', 'Trying discovery ...', and only finally 'Trying static IP ...' if prior steps fail."}}
{"timestamp": "2025-09-20T14:36:47.063280", "agent_id": "investigator-142927-625883", "finding_type": "insight", "severity": "low", "message": "Supabase invalid credentials produce multiple identical error logs due to repeated get_supabase() calls in tests, creating noisy output.", "data": {"evidence": ["Repeated 'Invalid API key' logs in doctor run with overridden SUPABASE_URL/KEY"], "files": ["src/db.py:16-21", "src/test_connections.py:12-20, 62-71, 95-115"], "recommendation": "Log the failure once at WARN, suppress duplicate stack traces in doctor mode, or memoize the failure to prevent repeating in subsequent tests."}}
{"timestamp": "2025-09-20T14:36:55.771368", "agent_id": "investigator-142927-625883", "finding_type": "issue", "severity": "low", "message": "SIGINT cleanup prints a noisy 'Task exception was never retrieved (SystemExit: 0)' traceback on shutdown.", "data": {"evidence": ["Observed at end of demo run after sending SIGINT"], "files": ["src/main.py:61"], "recommendation": "Avoid raising SystemExit inside async task: let main() return, or catch SystemExit in signal handler; alternatively call `asyncio.get_event_loop().stop()` and exit in outer scope."}}

#!/usr/bin/env python3
"""
Supabase Publication Verification Script

This script connects to Supabase database to verify that the `supabase_realtime`
publication exists and contains the required tables for realtime functionality.

If the publication or tables are missing, realtime will SILENTLY FAIL - subscribe()
will succeed but zero events will be received.

Generated by Claude Code automation.
"""

import os
import asyncio
from dotenv import load_dotenv
from supabase import create_client

# Load environment variables
load_dotenv()

SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_SERVICE_ROLE_KEY")

REQUIRED_TABLES = [
    "recipe_commands",
    "parameter_control_commands"
]

async def main():
    print("=" * 80)
    print("SUPABASE REALTIME PUBLICATION VERIFICATION")
    print("=" * 80)
    print()

    if not SUPABASE_URL or not SUPABASE_KEY:
        print("ERROR: Missing Supabase credentials in .env file")
        print("  SUPABASE_URL:", SUPABASE_URL)
        print("  SUPABASE_SERVICE_ROLE_KEY:", "Present" if SUPABASE_KEY else "Missing")
        return

    print(f"Connecting to Supabase at: {SUPABASE_URL}")
    print()

    # Create Supabase client
    supabase = create_client(SUPABASE_URL, SUPABASE_KEY)

    try:
        # Query pg_publication_tables to check for supabase_realtime publication
        print("Querying pg_publication_tables for 'supabase_realtime' publication...")

        result = supabase.rpc(
            "query_publication_tables",
            {}
        ).execute()

        # Fallback: Try direct table query if RPC doesn't exist
        # This will require appropriate permissions
        print("Note: If RPC fails, will try direct query (requires SUPERUSER access)")

    except Exception as e:
        print(f"RPC method failed: {e}")
        print()
        print("Attempting direct SQL query via Postgrest...")

        try:
            # Try using Supabase SQL editor or manual query
            # NOTE: This may fail without superuser permissions
            print()
            print("MANUAL VERIFICATION REQUIRED")
            print("=" * 80)
            print()
            print("Please run this SQL query in Supabase SQL Editor:")
            print()
            print("  SELECT * FROM pg_publication_tables")
            print("  WHERE pubname = 'supabase_realtime';")
            print()
            print("Expected results:")
            for table in REQUIRED_TABLES:
                print(f"  - pubname: supabase_realtime, tablename: {table}")
            print()
            print("=" * 80)
            print()
            print("If publication doesn't exist or tables are missing, run these commands:")
            print()
            print("-- Check if publication exists:")
            print("SELECT * FROM pg_publication WHERE pubname = 'supabase_realtime';")
            print()
            print("-- If not exist, create it:")
            print("CREATE PUBLICATION supabase_realtime;")
            print()
            print("-- Add required tables:")
            print("ALTER PUBLICATION supabase_realtime ADD TABLE recipe_commands;")
            print("ALTER PUBLICATION supabase_realtime ADD TABLE parameter_control_commands;")
            print()
            print("-- Verify:")
            print("SELECT * FROM pg_publication_tables WHERE pubname = 'supabase_realtime';")
            print()
            print("=" * 80)
            print()
            print("WARNING: Publication changes require SUPERUSER or publication owner privileges.")
            print("You may need to run these commands via Supabase Dashboard SQL Editor.")

        except Exception as e2:
            print(f"Direct query also failed: {e2}")

    print()
    print("VERIFICATION SCRIPT COMPLETE")
    print()
    print("IMPORTANT NOTES:")
    print("- Without proper publication setup, realtime will SILENTLY FAIL")
    print("- subscribe() will succeed but zero events will be received")
    print("- This is the #1 cause of 'realtime not working' issues")
    print()

if __name__ == "__main__":
    asyncio.run(main())

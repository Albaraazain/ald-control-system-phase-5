# Multi-stage Docker file for testing ALD Control System
FROM python:3.9-slim as base

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/workspace/src \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    postgresql-client \
    netcat-traditional \
    curl \
    git \
    && rm -rf /var/lib/apt/lists/*

# Create workspace directory
WORKDIR /workspace

# Copy requirements first for better caching
COPY requirements.txt .

# Install Python dependencies
RUN pip install --upgrade pip && \
    pip install -r requirements.txt

# Additional test dependencies
RUN pip install \
    pytest-html \
    pytest-json-report \
    pytest-benchmark \
    pytest-timeout \
    pytest-dependency \
    memory-profiler \
    psutil \
    bandit \
    safety \
    semgrep

# Copy application code
COPY . .

# Create necessary directories
RUN mkdir -p test-results performance_results benchmark_results security_results

# Set proper permissions
RUN chmod +x src/main.py

# Health check for test environment
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -c "import src.main; print('Test environment ready')" || exit 1

# Default command for testing
CMD ["python", "-m", "pytest", "--version"]

# Development stage with additional tools
FROM base as development

# Install development tools
RUN pip install \
    black \
    isort \
    flake8 \
    mypy \
    pre-commit

# Performance testing stage
FROM base as performance

# Install performance monitoring tools
RUN pip install \
    locust \
    py-spy \
    line_profiler

# Copy performance test configurations
COPY tools/performance/ /workspace/tools/performance/

# Security testing stage
FROM base as security

# Install security analysis tools
RUN pip install \
    bandit[toml] \
    safety \
    semgrep \
    pip-audit

# Install additional security scanners
RUN curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

# Production-like testing stage
FROM base as production

# Remove development dependencies and clean up
RUN pip uninstall -y \
    pytest \
    pytest-cov \
    pytest-mock \
    && pip cache purge

# Copy only production files
COPY src/ /workspace/src/
COPY requirements.txt /workspace/

# Install only production dependencies
RUN pip install --no-dev -r requirements.txt

# Run as non-root user
RUN useradd --create-home --shell /bin/bash ald && \
    chown -R ald:ald /workspace
USER ald

# Expose application port
EXPOSE 8000

# Health check for production-like environment
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
    CMD python -c "from src.abstractions.interfaces import IDatabaseService; print('Production health check OK')" || exit 1

CMD ["python", "src/main.py"]
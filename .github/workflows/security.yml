# Security Testing Workflow for ALD Control System
name: Security Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily security scan at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  security-scan:
    name: Comprehensive Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        # Fetch full history for credential scanning
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio safety bandit semgrep
        # Install additional security tools
        pip install jsonschema

    - name: Create test environment
      run: |
        # Create minimal test configuration
        echo "SUPABASE_URL=https://test.supabase.co" > .env.test
        echo "SUPABASE_KEY=test_key" >> .env.test
        echo "MACHINE_ID=test-machine" >> .env.test
        echo "PLC_TYPE=simulation" >> .env.test

    - name: Run credential security scan
      run: |
        echo "üîç Running credential security scan..."
        python -m tests.security.test_credential_security
      continue-on-error: false

    - name: Run database security tests
      run: |
        echo "üõ°Ô∏è Running database security tests..."
        python -m pytest tests/security/test_database_security.py -v
      continue-on-error: true

    - name: Run PLC security tests
      run: |
        echo "üè≠ Running PLC security tests..."
        python -m pytest tests/security/test_plc_security.py -v
      continue-on-error: true

    - name: Run comprehensive security automation
      run: |
        echo "üöÄ Running comprehensive security pipeline..."
        python -m tests.security.security_automation
      continue-on-error: false

    - name: Run static security analysis with Bandit
      run: |
        echo "üîé Running static security analysis..."
        bandit -r src/ -f json -o security_results/bandit_report.json || true
        bandit -r src/ -f txt
      continue-on-error: true

    - name: Run dependency vulnerability check
      run: |
        echo "üì¶ Checking dependency vulnerabilities..."
        safety check --json --output security_results/safety_report.json || true
        safety check
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          security_results/
          **/*security_report*.json
          **/*security_report*.html
        retention-days: 30

    - name: Comment PR with security results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');

          // Try to read security report
          let securitySummary = "üîí Security scan completed";

          try {
            const reportFiles = fs.readdirSync('security_results/').filter(f => f.includes('security_report') && f.endsWith('.json'));
            if (reportFiles.length > 0) {
              const reportPath = path.join('security_results', reportFiles[0]);
              const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));

              securitySummary = `üîí **Security Scan Results**

              **Security Score:** ${report.metrics.security_score.toFixed(1)}/100
              **Tests:** ${report.metrics.passed_tests}/${report.metrics.total_tests} passed

              **Issues Found:**
              - Critical: ${report.metrics.critical_issues}
              - High: ${report.metrics.high_issues}
              - Medium: ${report.metrics.medium_issues}
              - Low: ${report.metrics.low_issues}

              ${report.metrics.critical_issues > 0 ? '‚ö†Ô∏è **Critical security issues found - must be resolved before merge**' : '‚úÖ No critical security issues found'}`;
            }
          } catch (e) {
            console.log('Could not read security report:', e);
          }

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: securitySummary
          });

  security-baseline-check:
    name: Security Baseline Validation
    runs-on: ubuntu-latest
    needs: security-scan

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Download security reports
      uses: actions/download-artifact@v3
      with:
        name: security-reports
        path: security_results/

    - name: Validate security baseline
      run: |
        echo "üéØ Validating security baseline..."

        # Check if any critical issues were found
        if [ -f "security_results/bandit_report.json" ]; then
          CRITICAL_COUNT=$(cat security_results/bandit_report.json | jq '[.results[] | select(.issue_severity == "HIGH")] | length')
          echo "Critical security issues found: $CRITICAL_COUNT"

          if [ "$CRITICAL_COUNT" -gt "0" ]; then
            echo "‚ùå Security baseline failed: Critical issues found"
            exit 1
          fi
        fi

        # Check if comprehensive scan passed
        if [ -f "security_results/security_report_*.json" ]; then
          LATEST_REPORT=$(ls -t security_results/security_report_*.json | head -1)
          SECURITY_SCORE=$(cat "$LATEST_REPORT" | jq '.metrics.security_score')
          CRITICAL_ISSUES=$(cat "$LATEST_REPORT" | jq '.metrics.critical_issues')

          echo "Security score: $SECURITY_SCORE"
          echo "Critical issues: $CRITICAL_ISSUES"

          if (( $(echo "$SECURITY_SCORE < 85.0" | bc -l) )); then
            echo "‚ùå Security baseline failed: Score below 85.0"
            exit 1
          fi

          if [ "$CRITICAL_ISSUES" -gt "0" ]; then
            echo "‚ùå Security baseline failed: Critical issues found"
            exit 1
          fi
        fi

        echo "‚úÖ Security baseline validation passed"

  scheduled-security-audit:
    name: Daily Security Audit
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio safety bandit
        pip install jsonschema

    - name: Run comprehensive security audit
      run: |
        echo "üîç Running daily security audit..."
        python -m tests.security.security_automation

    - name: Generate security trend report
      run: |
        echo "üìà Generating security trend analysis..."
        # Could integrate with security metrics database here
        echo "Security audit completed on $(date)"

    - name: Upload audit results
      uses: actions/upload-artifact@v3
      with:
        name: daily-security-audit-$(date +%Y%m%d)
        path: security_results/
        retention-days: 90

    - name: Notify security team
      if: failure()
      run: |
        echo "üö® Daily security audit failed - notification would be sent to security team"
        # Could integrate with Slack, email, or other notification systems
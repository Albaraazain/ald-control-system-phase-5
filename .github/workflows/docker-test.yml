# Docker-based Testing Environment
name: Docker Testing Environment

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly full docker test suite
    - cron: '0 6 * * 1'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/ald-test

jobs:
  docker-build:
    name: Build Test Environment
    runs-on: ubuntu-latest

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha

    - name: Build test environment image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: .github/docker/Dockerfile.test
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  docker-unit-tests:
    name: Docker Unit Tests
    runs-on: ubuntu-latest
    needs: docker-build

    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run unit tests in Docker
      run: |
        docker run --rm \
          -v ${{ github.workspace }}:/workspace \
          -w /workspace \
          -e PYTHON_VERSION=${{ matrix.python-version }} \
          ${{ needs.docker-build.outputs.image-tag }} \
          bash -c "
            python -m pytest tests/architecture/ tests/security/ \
              --cov=src --cov-report=xml --cov-report=term \
              --junit-xml=test-results/docker-unit-${{ matrix.python-version }}.xml \
              -v --tb=short
          "

    - name: Upload Docker test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: docker-unit-tests-py${{ matrix.python-version }}
        path: test-results/
        retention-days: 30

  docker-integration-tests:
    name: Docker Integration Tests
    runs-on: ubuntu-latest
    needs: docker-build

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_ald_docker
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run integration tests in Docker
      run: |
        docker run --rm \
          -v ${{ github.workspace }}:/workspace \
          -w /workspace \
          --network host \
          -e DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_ald_docker \
          -e PLC_TYPE=simulation \
          ${{ needs.docker-build.outputs.image-tag }} \
          bash -c "
            python -m pytest tests/integration/ \
              --junit-xml=test-results/docker-integration.xml \
              -v --tb=short --timeout=300
          "

    - name: Upload Docker integration results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: docker-integration-tests
        path: test-results/
        retention-days: 30

  docker-performance-tests:
    name: Docker Performance Tests
    runs-on: ubuntu-latest
    needs: docker-build

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup performance test environment
      run: |
        docker network create ald-test-network
        docker run -d --name postgres-perf \
          --network ald-test-network \
          -e POSTGRES_PASSWORD=test_password \
          -e POSTGRES_USER=test_user \
          -e POSTGRES_DB=test_ald_performance \
          postgres:13

    - name: Run performance tests in Docker
      run: |
        docker run --rm \
          -v ${{ github.workspace }}:/workspace \
          -w /workspace \
          --network ald-test-network \
          -e DATABASE_URL=postgresql://test_user:test_password@postgres-perf:5432/test_ald_performance \
          -e PLC_TYPE=simulation \
          -e PERFORMANCE_TEST_MODE=true \
          ${{ needs.docker-build.outputs.image-tag }} \
          bash -c "
            echo 'ðŸš€ Running performance tests in isolated Docker environment...'
            python benchmark_performance_continuous_logging.py
            python quick_performance_check.py
          "

    - name: Cleanup performance environment
      if: always()
      run: |
        docker stop postgres-perf || true
        docker rm postgres-perf || true
        docker network rm ald-test-network || true

    - name: Upload Docker performance results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: docker-performance-tests
        path: |
          performance_results/
          benchmark_results/
        retention-days: 30

  docker-security-scan:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    needs: docker-build

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.docker-build.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run security tests in Docker
      run: |
        docker run --rm \
          -v ${{ github.workspace }}:/workspace \
          -w /workspace \
          ${{ needs.docker-build.outputs.image-tag }} \
          bash -c "
            python -m pytest tests/security/ -v
            python -m tests.security.security_automation
          "

  docker-cleanup:
    name: Cleanup Docker Images
    runs-on: ubuntu-latest
    needs: [docker-unit-tests, docker-integration-tests, docker-performance-tests, docker-security-scan]
    if: always()

    steps:
    - name: Delete old images
      uses: actions/delete-package-versions@v4
      with:
        package-name: ${{ env.IMAGE_NAME }}
        package-type: 'container'
        min-versions-to-keep: 5
        delete-only-untagged-versions: true